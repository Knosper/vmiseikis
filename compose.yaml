version: '3.8'

name: ft_transcendence

networks:
  internal:
    driver: bridge
    name: transcendence_network

services:
  backend:
    build:
      args:
        NODE_VERSION: ${NODE_VERSION}
      #context: ${BACKEND_VOLUME}
      dockerfile: ./Dockerfile
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    image: backend
    init: true
    networks:
      - internal
    ports:
      - '8080:3000'
    restart: unless-stopped
    volumes:
      - ${BACKEND_VOLUME}:/usr/src/app
  frontend:
    build:
      args:
        NODE_VERSION: ${NODE_VERSION}
      #context: ${FRONTEND_VOLUME}
      dockerfile: ./Dockerfile
    container_name: frontend
    depends_on:
      - backend
    env_file: .env
    image: frontend
    init: true
    networks:
      - internal
    ports:
      - '3000:3000'
      - '5173:5173'
    restart: unless-stopped
    volumes:
      - ${FRONTEND_VOLUME}:/usr/src/app
  postgres:
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USER: ${POSTGRES_USER}
    expose:
      - '5432'
    image: postgres:16
    init: true
    healthcheck:
      interval: 1s
      retries: 5
      #test: [ "CMD", "pg_isready" ]
      test: pg_isready -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -p 5432
      timeout: 5s
    hostname: ${POSTGRES_HOST}
    networks:
      - internal
    ports:
      - '5432:5432'
    restart: unless-stopped
    user: ${POSTGRES_USER}
